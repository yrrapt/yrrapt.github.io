<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes</title>
    <link>https://yrrapt.github.io/</link>
    <description>Recent content on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Sun, 20 Dec 2020 15:02:03 +0100</lastBuildDate><atom:link href="https://yrrapt.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ADC Verification Techniques</title>
      <link>https://yrrapt.github.io/analogue/verification/adc_verification/</link>
      <pubDate>Sun, 20 Dec 2020 15:02:03 +0100</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/verification/adc_verification/</guid>
      <description>ADC Verification Techniques ADC DNL/INL Measurement From https://www.reddit.com/r/chipdesign/comments/g9fsyg/dnlinl_of_adc_in_cadence:
 I never use the DNL &amp;amp; INL calculator. It is so easy to get garbage answers with it. I&amp;rsquo;ve never figured out how to do it reliably. Luckily, it is trivial to do this in Python. First, strobe the output codes of the ADC at the sampling rate and then save them to a file. Just a list. So, the list would look like: 0 0 0 0 0 0 0 .</description>
    </item>
    
    <item>
      <title>Inductor Design</title>
      <link>https://yrrapt.github.io/analogue/design/inductor/inductor-design/</link>
      <pubDate>Sun, 20 Dec 2020 15:02:03 +0100</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/inductor/inductor-design/</guid>
      <description>Electromagnetics \[ P = \frac{1}{2} \oint_S \mathbf{E} \times \mathbf{H}^* = \cdot d\mathbf{s} = P_l + 2 j \omega ~ (W_m - W_e) \]
Lumped Model Design 
Inductance \[ L_S = \beta ~ d^{\alpha_1}_{out} ~ w^{\alpha_2} ~ d^{\alpha_3}_{avg} ~ n^{\alpha_4} ~ s^{\alpha_5} ~~~ [nH]\]
Series Resistance \[ R_s = l / ( \sigma ~ w ~ \delta ~ (1 - e^{-t/\delta})) = k_1 ~ l/w \]
\[ \delta = \sqrt{ 2 / (w ~ \mu ~ \sigma) } \]</description>
    </item>
    
    <item>
      <title>Tank Design</title>
      <link>https://yrrapt.github.io/analogue/design/inductor/tank-design/</link>
      <pubDate>Sun, 20 Dec 2020 15:02:03 +0100</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/inductor/tank-design/</guid>
      <description>Tank Inductance \[ L_{tank} = \left[ 1 + {(R_s / (L_s \omega))}^2 \right] L_s \]
Tank Capacitance \[ C_{tank} = C_{ad} + C_{tot} = C_{load} + C_{tot} \]
Tank Resistance \[ R_{tank} = R_p \parallel R_{s,p} = {(1/R_p + 1/R_{s,p} )}^{-1} \]
For \( Q_{tank}  1.5 \):
\[ R_{s,p} = \left[ (1 + {(L_s \omega / R_s)}^2 \right] R_s \approx {(L_s \omega)}^2 / R_s \]
Geometric Program \[ maximise ~~~~ R_{tank} \]</description>
    </item>
    
    <item>
      <title>Common Source</title>
      <link>https://yrrapt.github.io/analogue/design/algorithmicdesign/common-source/common-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/algorithmicdesign/common-source/common-source/</guid>
      <description>Ideal Current Source To design the amplifier we will start with two design specifications: the DC gain and the gain-bandwidth product (GBW).
These described as:
$$ A_{DC} = g_m \cdot r_o$$
$$ GBW = \frac{ g_m }{ 2 \pi C_L }$$
Let&amp;rsquo;s use an example spec:
   Parameter Specification     $$ A_{DC} $$ 40 dB   $$ GBW $$ 1 MHz   $$ C_L $$ 10 pF    Let&amp;rsquo;s rearrange using $$ \frac{g_m}{I_d} $$ as a parameter:</description>
    </item>
    
    <item>
      <title>Control / Stability References</title>
      <link>https://yrrapt.github.io/analogue/design/control/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/control/references/</guid>
      <description> Internal and External Op-Amp Compensation: A Control-Centric Tutorial  </description>
    </item>
    
    <item>
      <title>Inductor References</title>
      <link>https://yrrapt.github.io/analogue/design/inductor/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/inductor/references/</guid>
      <description> On-Chip Spiral Inductors for RF Applications: An Overview A Fundamental Approach for Design and Optimization of a Spiral Inductor Concepts and Methods in Optimization of Integrated LC VCOs Simple Accurate Expressions for Planar Spiral Inductances Optimization of Inductor Circuits via Geometric Programming  </description>
    </item>
    
    <item>
      <title>Jitter and Phase Noise Principles</title>
      <link>https://yrrapt.github.io/analogue/design/pll/phase-noise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/pll/phase-noise/</guid>
      <description>Jitter Considering the jitter from a white noise source on a sinusoidal signal described by:
\[ v(t) = A sin( \omega_0 t) + n(t) \]
Given the assumption that the amplitude of the signal is much greater than the noise the transition times are only slightly modified. The small signal approximation can be made where:
\[ v(t) \approx A \omega_0 t + n(t) \]
Find when the signal equals zero at time moment k.</description>
    </item>
    
    <item>
      <title>LC VCO Design</title>
      <link>https://yrrapt.github.io/analogue/design/pll/vco-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/pll/vco-design/</guid>
      <description>The impedance for a parallel RLC for \( \Delta \omega is:
\[ Z(\omega_0 + \Delta \omega) \approx \frac{1}{G_L} \cdot \frac{1}{1 + j 2 Q_L \frac{\Delta \omega}{\omega_0} } \]
where \( G_L \) is the parallel parasitic conductance of the tank. For steady-state oscillation \( G_m R_L = \frac{G_m}{G_L} = 1 \).
In an oscillator the active device provides energy to compensate for losses in the tank circuit and sustain oscillation. It supplies DC energy to the tank but also injects noise which becomes phase noise.</description>
    </item>
    
    <item>
      <title>PLL References</title>
      <link>https://yrrapt.github.io/analogue/design/pll/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/pll/references/</guid>
      <description> Spur Reduction Techniques for Phase-Locked Loops Exploiting A Sub-Sampling Phase Detector A Noise-Shifting Differential Colpitts VCO Spur Reduction Techniques for Phase-Locked Loops Exploiting A Sub-Sampling Phase Detector A General Theory of Phase Noise in Electrical Oscillators  </description>
    </item>
    
    <item>
      <title>PLL Systems</title>
      <link>https://yrrapt.github.io/analogue/design/pll/pll-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/pll/pll-system/</guid>
      <description>Transfer Functions  [1]
Considering the system above, the transfer functions of the loop are:
Open Loop Transfer Function:
\[ G(s) = \frac{ \theta_o (s) }{ \theta_o (e) } = \frac{K_d ~ K_o ~ F(s)}{s} \]
System Transfer Function:
\[ H(s) = \frac{ \theta_o (s) }{ \theta_i (e) } = \frac{G(s)}{1 + G(s)} = \frac{K_d ~ K_o ~ F(s)}{s + K_d ~ K_o ~ F(s)} \]
Error Transfer Function:
\[ E(s) = \frac{ \theta_e (s) }{ \theta_i (e) } = \frac{1}{1 + G(s)} = 1 - H(s) = \frac{s}{s + K_d ~ K_o ~ F(s)} \]</description>
    </item>
    
    <item>
      <title>Simulation References</title>
      <link>https://yrrapt.github.io/analogue/design/simulation/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yrrapt.github.io/analogue/design/simulation/references/</guid>
      <description>Phase Noise  Efficient transient noise analysis of non-periodic mixed analogue/digital circuits  </description>
    </item>
    
  </channel>
</rss>
